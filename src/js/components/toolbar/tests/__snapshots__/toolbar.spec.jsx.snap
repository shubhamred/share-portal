// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/Toolbarcomponent should render with Component 1`] = `
<Toolbarcomponent
  actions={
    Array [
      Object {
        "component": <p>
          Button label
        </p>,
      },
    ]
  }
  title="Dummy Title"
>
  <WithStyles(ForwardRef(Toolbar))
    className="makeStyles-root-1"
  >
    <ForwardRef(Toolbar)
      className="makeStyles-root-1"
      classes={
        Object {
          "dense": "MuiToolbar-dense",
          "gutters": "MuiToolbar-gutters",
          "regular": "MuiToolbar-regular",
          "root": "MuiToolbar-root",
        }
      }
    >
      <div
        className="MuiToolbar-root MuiToolbar-regular makeStyles-root-1 MuiToolbar-gutters"
      >
        <WithStyles(ForwardRef(Typography))
          className="makeStyles-title-3 customH5"
          variant="h6"
        >
          <ForwardRef(Typography)
            className="makeStyles-title-3 customH5"
            classes={
              Object {
                "alignCenter": "MuiTypography-alignCenter",
                "alignJustify": "MuiTypography-alignJustify",
                "alignLeft": "MuiTypography-alignLeft",
                "alignRight": "MuiTypography-alignRight",
                "body1": "MuiTypography-body1",
                "body2": "MuiTypography-body2",
                "button": "MuiTypography-button",
                "caption": "MuiTypography-caption",
                "colorError": "MuiTypography-colorError",
                "colorInherit": "MuiTypography-colorInherit",
                "colorPrimary": "MuiTypography-colorPrimary",
                "colorSecondary": "MuiTypography-colorSecondary",
                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                "displayBlock": "MuiTypography-displayBlock",
                "displayInline": "MuiTypography-displayInline",
                "gutterBottom": "MuiTypography-gutterBottom",
                "h1": "MuiTypography-h1",
                "h2": "MuiTypography-h2",
                "h3": "MuiTypography-h3",
                "h4": "MuiTypography-h4",
                "h5": "MuiTypography-h5",
                "h6": "MuiTypography-h6",
                "noWrap": "MuiTypography-noWrap",
                "overline": "MuiTypography-overline",
                "paragraph": "MuiTypography-paragraph",
                "root": "MuiTypography-root",
                "srOnly": "MuiTypography-srOnly",
                "subtitle1": "MuiTypography-subtitle1",
                "subtitle2": "MuiTypography-subtitle2",
              }
            }
            variant="h6"
          >
            <h6
              className="MuiTypography-root makeStyles-title-3 customH5 MuiTypography-h6"
            >
              Dummy Title
            </h6>
          </ForwardRef(Typography)>
        </WithStyles(ForwardRef(Typography))>
        <div
          className="makeStyles-margin-4 customSubtitle"
          key="component-0"
        >
          <p>
            Button label
          </p>
        </div>
      </div>
    </ForwardRef(Toolbar)>
  </WithStyles(ForwardRef(Toolbar))>
</Toolbarcomponent>
`;

exports[`components/Toolbarcomponent should render with button 1`] = `
<Toolbarcomponent
  actions={
    Array [
      Object {
        "color": "secondary",
        "label": "Button label",
        "onClick": [MockFunction],
        "variant": "contained",
      },
    ]
  }
  title="Dummy Title"
>
  <WithStyles(ForwardRef(Toolbar))
    className="makeStyles-root-1"
  >
    <ForwardRef(Toolbar)
      className="makeStyles-root-1"
      classes={
        Object {
          "dense": "MuiToolbar-dense",
          "gutters": "MuiToolbar-gutters",
          "regular": "MuiToolbar-regular",
          "root": "MuiToolbar-root",
        }
      }
    >
      <div
        className="MuiToolbar-root MuiToolbar-regular makeStyles-root-1 MuiToolbar-gutters"
      >
        <WithStyles(ForwardRef(Typography))
          className="makeStyles-title-3 customH5"
          variant="h6"
        >
          <ForwardRef(Typography)
            className="makeStyles-title-3 customH5"
            classes={
              Object {
                "alignCenter": "MuiTypography-alignCenter",
                "alignJustify": "MuiTypography-alignJustify",
                "alignLeft": "MuiTypography-alignLeft",
                "alignRight": "MuiTypography-alignRight",
                "body1": "MuiTypography-body1",
                "body2": "MuiTypography-body2",
                "button": "MuiTypography-button",
                "caption": "MuiTypography-caption",
                "colorError": "MuiTypography-colorError",
                "colorInherit": "MuiTypography-colorInherit",
                "colorPrimary": "MuiTypography-colorPrimary",
                "colorSecondary": "MuiTypography-colorSecondary",
                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                "displayBlock": "MuiTypography-displayBlock",
                "displayInline": "MuiTypography-displayInline",
                "gutterBottom": "MuiTypography-gutterBottom",
                "h1": "MuiTypography-h1",
                "h2": "MuiTypography-h2",
                "h3": "MuiTypography-h3",
                "h4": "MuiTypography-h4",
                "h5": "MuiTypography-h5",
                "h6": "MuiTypography-h6",
                "noWrap": "MuiTypography-noWrap",
                "overline": "MuiTypography-overline",
                "paragraph": "MuiTypography-paragraph",
                "root": "MuiTypography-root",
                "srOnly": "MuiTypography-srOnly",
                "subtitle1": "MuiTypography-subtitle1",
                "subtitle2": "MuiTypography-subtitle2",
              }
            }
            variant="h6"
          >
            <h6
              className="MuiTypography-root makeStyles-title-3 customH5 MuiTypography-h6"
            >
              Dummy Title
            </h6>
          </ForwardRef(Typography)>
        </WithStyles(ForwardRef(Typography))>
        <WithStyles(ForwardRef(Button))
          className="makeStyles-margin-4 customSubtitle"
          color="secondary"
          key="button-0"
          onClick={[MockFunction]}
          variant="contained"
        >
          <ForwardRef(Button)
            className="makeStyles-margin-4 customSubtitle"
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            color="secondary"
            onClick={[MockFunction]}
            variant="contained"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-contained makeStyles-margin-4 customSubtitle MuiButton-containedSecondary"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[MockFunction]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-contained makeStyles-margin-4 customSubtitle MuiButton-containedSecondary"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[MockFunction]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-margin-4 customSubtitle MuiButton-containedSecondary"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[MockFunction]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    Button label
                  </span>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </div>
    </ForwardRef(Toolbar)>
  </WithStyles(ForwardRef(Toolbar))>
</Toolbarcomponent>
`;

exports[`components/Toolbarcomponent should render with default 1`] = `
<WithStyles(ForwardRef(Toolbar))
  className="makeStyles-root-1"
>
  <WithStyles(ForwardRef(Typography))
    className="makeStyles-title-3 customH5"
    variant="h6"
  >
    Dummy Title
  </WithStyles(ForwardRef(Typography))>
</WithStyles(ForwardRef(Toolbar))>
`;
